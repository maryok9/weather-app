{"version":3,"sources":["data/weatherapi.js","App.js","reportWebVitals.js","index.js"],"names":["getWeatherData","cityname","a","axios","get","data","App","useState","weather","setWeather","city","setCity","getData","console","log","message","useEffect","className","type","placeholder","onChange","e","target","value","onClick","main","parseFloat","temp","toFixed","name","sys","country","humidity","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAKcA,EAAc,uCAAI,WAAOC,GAAP,iBAAAC,EAAA,+EAEFC,IAAMC,IALpB,kDAK+B,YAAQH,EAAR,kBAJhC,qCAEiB,uBAEhBI,EAFgB,EAEhBA,KAFgB,kBAGhBA,GAHgB,oGAAJ,sD,OCwDbC,MAxDf,WACE,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KAIMC,EAAO,uCAAG,4BAAAV,EAAA,+EAEOF,EAAeU,GAFtB,OAENL,EAFM,OAGZI,EAAWJ,GACXQ,QAAQC,IAAIT,GAJA,gDAMZQ,QAAQC,IAAI,KAAMC,SANN,yDAAH,qDAeb,OAJAC,qBAAU,WACRJ,MACC,IAGD,qBAAKK,UAAU,MAAf,SACI,sBAAKA,UAAU,OAAf,UACE,qBAAIA,UAAU,QAAd,UAAsB,mBAAGA,UAAU,gBAAnC,iBACE,sBAAKA,UAAU,cAAf,UACE,uBAAOC,KAAK,OACZC,YAAY,sBACZC,SAAU,SAACC,GAAD,OAAOV,EAAQU,EAAEC,OAAOC,UAElC,wBAAQL,KAAM,SAASM,QAAS,kBAAOZ,KAAvC,uBAEuB,oBAAhBJ,EAAQiB,KACvB,gCACI,qBAAKR,UAAU,iBAAf,SACE,0DAEA,6BAAKT,EAAQA,QAAQ,GAAGiB,OAC1B,qBAAKR,UAAU,aAAf,SACE,+BAAKS,WAAWlB,EAAQiB,KAAKE,KAAO,QAAQC,QAAQ,GAApD,aAEF,qBAAKX,UAAU,WAAf,SACE,+BAAKT,EAAQqB,KAAb,KAAqBrB,EAAQsB,IAAIC,aAEnC,qBAAKd,UAAU,oBAAf,SACE,4CAAeT,EAAQiB,KAAKO,SAA5B,YAGC,SCzCEC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d1e45a2c.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst baseUrl = 'http://api.openweathermap.org/data/2.5/weather?';\r\nconst apiKey = 'a057af28704b2881f4b469f7187020d8';\r\n\r\n export const getWeatherData =  async (cityname) => {\r\n     try{\r\n         const {data} = await axios.get(baseUrl + `q=${cityname}&appid=${apiKey}`);\r\n         return data;\r\n     }catch(error) {\r\n         throw error;\r\n     }\r\n}","import React, {  useEffect, useState  } from 'react';\nimport './App.css';\nimport {getWeatherData} from './data/weatherapi';\n\n\nfunction App() {\n  const [weather, setWeather] = useState({});\n  const [city, setCity] = useState('');\n\n//this is the function that calls the weather api\n\n  const getData = async () => {\n    try{\n      const data = await getWeatherData(city);\n      setWeather(data);\n      console.log(data);\n    }catch(error) {\n      console.log(error.message);\n    }\n  }\n      \n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  return (\n    <div className=\"App\">\n        <div className=\"card\">\n          <h2 className=\"title\"><i className=\"fa fa-cloud\"></i>Weather App</h2>\n            <div className=\"search-form\">\n              <input type=\"text\"\n              placeholder=\"Enter Your City....\"\n              onChange={(e) => setCity(e.target.value)} \n              />\n              <button type= \"button\" onClick={()  => getData()}>Search</button>\n            </div>\n            {(typeof weather.main != \"undefined\") ? (\n      <div> \n          <div className=\"main-container\">\n            <h4>Live Weather Condition</h4> \n          </div>\n            <h3>{weather.weather[0].main}</h3>\n          <div className=\"temprature\">\n            <h1>{parseFloat(weather.main.temp - 273.15).toFixed(1)}&deg;C</h1>\n          </div>\n          <div className=\"location\">\n            <h3>{weather.name}, {weather.sys.country}</h3>\n          </div>\n          <div className=\"temprature-change\">\n            <h6>Humidity: {weather.main.humidity}%</h6>\n          </div>\n      </div>\n        ) : ('')}\n    </div>\n  </div>\n\n  );\n};\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}